# 存储过程、函数

## 存储过程-流程控制语句

| 流控制 | 描述                                                                                                                    |
| ------ | ----------------------------------------------------------------------------------------------------------------------- |
| IF     | IF search_condition THEN statement_list<br>[ELSEIF search_condition THEN statement_list] [ELSE statementlist]<br>END IF |
| CASE   | CASE case_value<br> WHEN when_value THEN statement_list<br> [ELSE statement _list] END CASE                             |
| WHILE  | WHILE search_condition DO statement_list<br> END WHILE                                                                  |
| REPEAT | REPEAT statement_list<br> UNTIL search_condition END REPEAT                                                             |

### 存储过程-示例与调用

    (root@localhost) [test]> DROP TABLE if EXISTS tbl_proc_test;
    (root@localhost) [test]> CREATE TEMPORARY TABLE tbl_proc_test (num BIGINT);

    (root@localhost) [test]> DROP PROCEDURE IF EXISTS proc_test1;

    -- 修改MySQL语句的结束符号，不改的话存储过程中的SQL语句就会有问题
    DELIMITER // 
    CREATE PROCEDURE proc_test1 -- 创建一个叫 proc_test1 的存储过程
    (IN total INT, OUT res INT) -- 有两个参数，一个是IN的传入参数 total，一个是返回的 OUT 参数 res
    BEGIN -- 存储过程 body 的开始处
      DECLARE i INT; -- 用 DECLARE 关键字定义了一个变量
      SET i = 1; -- 用 SET 将变量设置为 1
      SET res = 1;
      IF total <=0 THEN
        SET total = 1;
      END IF;
      WHILE i <=total DO -- 做了一个循环
        SET res = res *i;
        INSERT INTO tbl_proc_test(num) VALUES(res); -- 将变量保存到临时表里
        SET i = i + 1;
      END WHILE;
        -- SELECT * FROM tbl_proc_test; -- 利用存储过程可以返回多个结果集1
        
        -- SELECT * FROM emp.employees where emp_no = 100001; -- 利用存储过程可以返回多个结果集1
    END ;// --存储过程body的结束处
    delimiter ;
    -- 将MySQL语句的结束符号改回分号

    CALL proc_test1(10, @a); -- 调用存储过程
    SELECT @a;
    SELECT * FROM tbl_proc_test;

输出结果：

    '1'
    '2'
    '6'
    '24'
    '120'
    '720'
    '5040'
    '40320'
    '362880'
    '3628800'

### 存储过程的维护

查看所有的存储过程

    (root@localhost) [(none)]> show procedure status\G

查看匹配的存储过程

    (root@localhost) [(none)]> show procedure status like'proc%'\G
    *************************** 1. row ***************************
                      Db: test
                    Name: proc_test1
                    Type: PROCEDURE
                Definer: neo@%
                Modified: 2022-01-11 14:22:01
                Created: 2022-01-11 14:22:01
          Security_type: DEFINER
                Comment:
    character_set_client: utf8mb4
    collation_connection: utf8mb4_general_ci
      Database Collation: utf8mb4_general_ci
    1 row in set (0.00 sec)

使用数据库中的 ROUTINES 表进行查看

    (root@localhost) [information_schema]> use information_schema;
    Database changed
    (root@localhost) [information_schema]> desc ROUTINES;
    +--------------------------+---------------------+------+-----+---------------------+-------+
    | Field                    | Type                | Null | Key | Default             | Extra |
    +--------------------------+---------------------+------+-----+---------------------+-------+
    | SPECIFIC_NAME            | varchar(64)         | NO   |     |                     |       |
    | ROUTINE_CATALOG          | varchar(512)        | NO   |     |                     |       |
    | ROUTINE_SCHEMA           | varchar(64)         | NO   |     |                     |       |
    | ROUTINE_NAME             | varchar(64)         | NO   |     |                     |       |
    | ROUTINE_TYPE             | varchar(9)          | NO   |     |                     |       |
    | DATA_TYPE                | varchar(64)         | NO   |     |                     |       |
    | CHARACTER_MAXIMUM_LENGTH | int(21)             | YES  |     | NULL                |       |
    | CHARACTER_OCTET_LENGTH   | int(21)             | YES  |     | NULL                |       |
    | NUMERIC_PRECISION        | bigint(21) unsigned | YES  |     | NULL                |       |
    | NUMERIC_SCALE            | int(21)             | YES  |     | NULL                |       |
    | DATETIME_PRECISION       | bigint(21) unsigned | YES  |     | NULL                |       |
    | CHARACTER_SET_NAME       | varchar(64)         | YES  |     | NULL                |       |
    | COLLATION_NAME           | varchar(64)         | YES  |     | NULL                |       |
    | DTD_IDENTIFIER           | longtext            | YES  |     | NULL                |       |
    | ROUTINE_BODY             | varchar(8)          | NO   |     |                     |       |
    | ROUTINE_DEFINITION       | longtext            | YES  |     | NULL                |       |
    | EXTERNAL_NAME            | varchar(64)         | YES  |     | NULL                |       |
    | EXTERNAL_LANGUAGE        | varchar(64)         | YES  |     | NULL                |       |
    | PARAMETER_STYLE          | varchar(8)          | NO   |     |                     |       |
    | IS_DETERMINISTIC         | varchar(3)          | NO   |     |                     |       |
    | SQL_DATA_ACCESS          | varchar(64)         | NO   |     |                     |       |
    | SQL_PATH                 | varchar(64)         | YES  |     | NULL                |       |
    | SECURITY_TYPE            | varchar(7)          | NO   |     |                     |       |
    | CREATED                  | datetime            | NO   |     | 0000-00-00 00:00:00 |       |
    | LAST_ALTERED             | datetime            | NO   |     | 0000-00-00 00:00:00 |       |
    | SQL_MODE                 | varchar(8192)       | NO   |     |                     |       |
    | ROUTINE_COMMENT          | longtext            | NO   |     | NULL                |       |
    | DEFINER                  | varchar(93)         | NO   |     |                     |       |
    | CHARACTER_SET_CLIENT     | varchar(32)         | NO   |     |                     |       |
    | COLLATION_CONNECTION     | varchar(32)         | NO   |     |                     |       |
    | DATABASE_COLLATION       | varchar(32)         | NO   |     |                     |       |
    +--------------------------+---------------------+------+-----+---------------------+-------+
    31 rows in set (0.00 sec)

    (root@localhost) [information_schema]> select * from ROUTINES where ROUTINE_SCHEMA='test'\G
    *************************** 1. row ***************************
              SPECIFIC_NAME: proc_test1
            ROUTINE_CATALOG: def
              ROUTINE_SCHEMA: test
                ROUTINE_NAME: proc_test1
                ROUTINE_TYPE: PROCEDURE
                  DATA_TYPE:
    CHARACTER_MAXIMUM_LENGTH: NULL
      CHARACTER_OCTET_LENGTH: NULL
          NUMERIC_PRECISION: NULL
              NUMERIC_SCALE: NULL
          DATETIME_PRECISION: NULL
          CHARACTER_SET_NAME: NULL
              COLLATION_NAME: NULL
              DTD_IDENTIFIER: NULL
                ROUTINE_BODY: SQL
          ROUTINE_DEFINITION: BEGIN -- 存储过程body的开始处
            DECLARE i INT; -- 用DECLARE关键字定义了一个变量
            SET i = 1; -- 用SET将变量设置为1
            SET res = 1;
            IF total <=0 THEN
                    SET total = 1;
            END IF;
            WHILE i <=total DO -- 做了一个循环
                    SET res = res *i;
                    INSERT INTO tbl_proc_test(num) VALUES(res); -- 将变量保存到临时表里
                    SET i = i + 1;
            END WHILE;
        -- SELECT * FROM tbl_proc_test; -- 利用存储过程可以返回多个结果集1

        -- SELECT * FROM emp.employees where emp_no = 100001; -- 利用存储过程可以返回多个结果集1
    END
              EXTERNAL_NAME: NULL
          EXTERNAL_LANGUAGE: NULL
            PARAMETER_STYLE: SQL
            IS_DETERMINISTIC: NO
            SQL_DATA_ACCESS: CONTAINS SQL
                    SQL_PATH: NULL
              SECURITY_TYPE: DEFINER
                    CREATED: 2022-01-11 14:22:01
                LAST_ALTERED: 2022-01-11 14:22:01
                    SQL_MODE: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
            ROUTINE_COMMENT:
                    DEFINER: neo@%
        CHARACTER_SET_CLIENT: utf8mb4
        COLLATION_CONNECTION: utf8mb4_general_ci
          DATABASE_COLLATION: utf8mb4_general_ci
    1 row in set (0.00 sec)

存储用户会有一个定义者用户，上面的就是 DEFINER: neo@% ，如果把这个用户删除就会报错:

    (root@localhost) [test]> drop user neo@'%';
    Query OK, 0 rows affected (0.00 sec)

    (root@localhost) [test]> call proc_test1(10,@a);
    ERROR 1449 (HY000): The user specified as a definer ('david'@'%') does not EXIST

通过修改mysql数据库中的proc表可以修复：

    (root@localhost) [mysql]> update proc set definer='root@localhost' where db='test' limit 1;
    (root@localhost) [test]> flush privileges;
    -- 然后重启，就可以重新运行了，注意如果存储过程中有临时表，要先新建临时表

## 自定义函数 ROUTINES 包含了存储过程和函数

与存储过程非常类似

* 但是必须带有返回值

与内置的 SUM(), MAX() 等 MySQL 原生函数使用方法类似

* SELECT func(val);
* SELECT * form tbl where col=func(val); <-每次都会调用函数所以性能损耗大

自定义函数可能在遍历每条记录中使用

* 注意性能损耗

在MySQL中其实也用得很少的一个特性

### 示例

    DROP FUNCTION IF EXISTS func_test1;

    DELIMITER //
    CREATE FUNCTION func_test1 (total INT)
    RETURNS BIGINT -- 表示这个函数返回的是什么，但是也只能返回这样的一个类型，不能返回一个结果集，这就不太实用
    BEGIN
      DECLARE i INT;
      DECLARE res INT;
      SET I = 1;
      SET RES = 1;
      IF TOTAL <= 0 THEN
        SET total = 1;
      END IF;
        WHILE i <= total DO
        SET res = res * i;
            SET i = i + 1;
      END WHILE;
        RETURN res;
    END;//

    DELIMITER ;

    SELECT func_test1(10); -- 不需要使用call调用


# 触发器

* 一触即发
* 当表上出现特定的事件时触发该程序执行
* UPDATE/DELETE/INSERT <-特定事件
* 相关权限：TRIGGER
        
      CREATE
      [DEFINER={ user | CURRENT_USER }]
      TRIGGER trigger_name trigger_time
      trigger_event ON tbl_name
      FOR EACH ROW 
      trigger_body t

      trigger_time:{ BEFORE | ALTER }
      trigger_event:{ INSERT | UPDATE |DELETE }

其实这个特性用得不多，但是某些场景会用到

| INSERT                         | UPDATE | DELETE            |
| ------------------------------ | ------ | ----------------- |
| INSERT<br>LOAD DATE<br>REPLACE | UPDATE | DELETE<br>REPLACE |

REPLACE 会同时触发 INSERT 和 DELETE

这些操作只有在DML语句的时候会触发，像 DROP TABLE、TRUNCATE TABLE、DROP A PARTITION 不会触发

5.6-：同一类型触发器只能有一个
5.7：允许多个同一类型的触发器

## 示例

    (root@localhost) [test]> CREATE TABLE `stu` (
      `name` varchar(50),
      `course` varchar(50),
      `score` int(11),
      PRIMARY KEY(`name`)
    ) ENGINE=InnoDB;

    DELIMITER //
    CREATE TRIGGER trg_upd_score -- 定义触发器
    BEFORE UPDATE ON `stu` -- 表示在对stu表做更新之前进行操作
    FOR EACH ROW -- 对每行生效
    BEGIN
    IF NEW.score < 0 THEN
      SET NEW.score = 0;
    ELSEIF NEW.score > 100 THEN
      SET NEW.score = 100;
    END IF;
    END;//
    DELIMITER ;

    -- NEW.col 更新以后的列值
    -- OLD.col 更新以前的列值（只读）

插入一些数据看看：

    (root@localhost) [test]> insert into stu values('aaa', '001', -100);
    Query OK, 1 row affected (0.00 sec)

    (root@localhost) [test]> insert into stu values('bbb', '001', 100);
    Query OK, 1 row affected (0.00 sec)

    (root@localhost) [test]> select * from stu;
    +------+--------+-------+
    | name | course | score |
    +------+--------+-------+
    | aaa  | 001    |  -100 |
    | bbb  | 001    |   100 |
    +------+--------+-------+
    2 rows in set (0.00 sec)

    (root@localhost) [test]> update stu set score = -5 where name='bbb';
    Query OK, 1 row affected (0.00 sec)
    Rows matched: 1  Changed: 1  Warnings: 0

    (root@localhost) [test]> select * from stu;
    +------+--------+-------+
    | name | course | score |
    +------+--------+-------+
    | aaa  | 001    |  -100 |
    | bbb  | 001    |     0 | <--可以看对这里被自动转成了0
    +------+--------+-------+
    2 rows in set (0.00 sec)

## 触发器总结

* 触发器对性能有损耗，应当**慎重使用**
* 对于事务，触发器执行失败则整个语句回滚
* Row 格式主从复制，**触发器不会在从库上执行**
* 使用触发器时应防止递归执行
* 可以用来做约束和物化视图

## 触发器高级应用--物化视图

* 物化视图
  * 不是基于基表的虚表
  * 根据基表实际存在的实表
  * 预先计算并保存多表的连接（JOIN）或聚集（GROUP BY）等耗时较多的SQL操作结果

示例：

    (root@localhost) [employees]> CREATE VIEW v_employees AS
        SELECT 
            *
        FROM
            employees.employees;
            
    SELECT 
        *
    FROM
        v_employees;

在 MySQL 中的视图都是虚拟的，视图实际上是不占用任何存储空间的而只是一个定义，类似下面的语句视图中的 group by max 聚合等函数在调用视图的时候还是需要计算的

    (root@localhost) [employees]> CREATE VIEW v_salary AS
        SELECT 
            emp_no, MAX(salary)
        FROM
            employees.salaries
        GROUP BY emp_no;
            
    SELECT 
        *
    FROM
        v_salary;

### 使用触发器在MySQL中实现物化视图

创建表 Orders

    (root@localhost) [test]> drop table Orders;
    (root@localhost) [test]> CREATE TABLE Orders( 
      order_id INT(11) NOT NULL
      ,product_name VARCHAR(30) NOT NULL 
      ,price DECIMAL(8,2) NOT NULL 
      ,amount INT NOT NULL
    );
    (root@localhost) [test]> insert into Orders values(1, "CPU", 135.5, 1);
    (root@localhost) [test]> insert into Orders values(2, "Memory", 48.2, 3);
    (root@localhost) [test]> insert into Orders values(3, "CPU", 125.6, 3);
    (root@localhost) [test]> insert into Orders values(4, "CPU", 105.3, 4);

    (root@localhost) [test]> select * from Orders;
    +----------+--------------+--------+--------+
    | order_id | product_name | price  | amount |
    +----------+--------------+--------+--------+
    |        1 | CPU          | 135.50 |      1 |
    |        2 | Memory       |  48.20 |      3 |
    |        3 | CPU          | 125.60 |      3 |
    |        4 | CPU          | 105.30 |      4 |
    +----------+--------------+--------+--------+
    4 rows in set (0.00 sec)

比如我有一个需求是需要统计 Orders 表中的一些聚合数据，然后想把这些数据保留下来

    (root@localhost) [test]> CREATE VIEW v_orders AS
        SELECT 
            product_name, SUM(price), SUM(amount), AVG(price), COUNT(1)
        FROM
            Orders
        GROUP BY product_name;

那么可以通过新建一张表，然后通过触发器来将聚合好的数据更新到新表中

    (root@localhost) [test]> CREATE TABLE Orders_MV( 
      product_name VARCHAR(30) NOT NULL 
      ,price_sum DECIMAL(8,2) NOT NULL 
      ,amount_sum INT NOT NULL 
      ,price_avg FLOAT NOT NULL 
      ,orders_cnt INT NOT NULL 
      ,UNIQUE INDEX (product_name)
    );

触发器在每次 Orders 表中插入数据后对数据进行处理然后插入到 Orders_MV 表中：

    (root@localhost) [test]> DELIMITER //
    CREATE TRIGGER tgr_Orders_insert
    AFTER INSERT ON Orders
    FOR EACH ROW
    BEGIN
      SET @old_price_sum = 0;
      SET @old_amount_sum = 0;
      SET @old_price_avg = 0;
      SET @old_orders_cnt = 0;
        
      SELECT IFNULL(price_sum, 0),IFNULL(amount_sum, 0),IFNULL(price_avg, 0),IFNULL(orders_cnt, 0) -- IFNULL() 如果第一个表达式为NULL，则返回第二个参数的值
      FROM Orders_MV
      WHERE product_name = NEW.product_name
      INTO @old_price_sum,@old_amount_sum,@old_price_avg,@old_orders_cnt; -- 将取出的值插入到上面设置的变量中

      SET @new_price_sum = @old_price_sum + NEW.price; 
      SET @new_amount_sum = @old_amount_sum + NEW.amount; 
      SET @new_orders_cnt = @old_orders_cnt + 1; 
      SET @new_price_avg = @new_price_sum /@new_orders_cnt;  -- 计算平均值
      REPLACE INTO Orders_MV VALUES(NEW.product_name, @new_price_sum, @new_amount_sum,@new_price_avg,@new_orders_cnt);

    END;//
    DELIMITER ;

# 事件

* 相当于一个定时器

默认是关闭的需要手动打开

    (root@localhost) [(none)]> show variables like 'event%';
    +-----------------+-------+
    | Variable_name   | Value |
    +-----------------+-------+
    | event_scheduler | OFF   |
    +-----------------+-------+
    1 row in set (0.01 sec)

    (root@localhost) [(none)]> set global event_scheduler = 1;
    Query OK, 0 rows affected (0.00 sec)

可以一小时后触发：

    CREATE EVENT myevent
      ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR
      DO
        UPDATE myschema.mytable SET mycol = mycol + 1;

可以每小时触发，也可以通过 BEGIN 定义一组触发，用得比较少，详见文档

分区管理工具，利用事件实现，https://github.com/yahoo/mysql_partition_manager

5.7 默认 event 是不启用的，可以通过配置配置文件一直启用：

    [mysqld]
    ...
    #skip-grant-tables
    event_scheduler=1

# 索引 B+ 树

## 什么是索引

先看个例子：

    (root@localhost) [dbt3]> show create table orders\G
    *************************** 1. row ***************************
          Table: orders
    Create Table: CREATE TABLE `orders` (
      `o_orderkey` int(11) NOT NULL,
      `o_custkey` int(11) DEFAULT NULL,
      `o_orderstatus` char(1) DEFAULT NULL,
      `o_totalprice` double DEFAULT NULL,
      `o_orderDATE` date DEFAULT NULL,
      `o_orderpriority` char(15) DEFAULT NULL,
      `o_clerk` char(15) DEFAULT NULL,
      `o_shippriority` int(11) DEFAULT NULL,
      `o_comment` varchar(79) DEFAULT NULL,
      PRIMARY KEY (`o_orderkey`),             <--主键索引，也叫聚集索引，必须是唯一的，每张表只有有一个
      KEY `i_o_orderdate` (`o_orderDATE`),    <--普通索引，也叫二级索引
      KEY `i_o_custkey` (`o_custkey`),        <--普通索引，也叫二级索引
    ) ENGINE=InnoDB DEFAULT CHARSET=latin1
    1 row in set (0.00 sec)

orders 表中的  PRIMARY KEY (`o_orderkey`), KEY `i_o_orderdate` (`o_orderDATE`), KEY `i_o_custkey` (`o_custkey`) 都叫索引

索引的主要类型有以下几种：

* PRIMARY KEY  主键索引，也叫聚集索引，必须是唯一的，每张表只有有一个
* UNIQUE INDEX 唯一索引，必须是唯一的，每张表可以有还多个
* KEY          普通索引，也叫二级索引

B+树索引的意思就是会对应创建的索引列进行排序，上面例子中就是对 o_orderkey，o_orderDATE，o_custkey 进行排序，排序过后最大的优势就是查询速度会非常快

也就是说一张表上可以有很多个索引，索引就是对创建索引的这些列进行排序，好处就是查询速度会非常非常快，并且这个快和数据量大小没有关系

B+ 树的缺点是对索引的数据进行 DML 操作后需要重新维护索引，维护的代价就比较大

有些规范会说一张表最大创建不要超过 5 个索引，本意是索引很多了之后的维护代价就会变得非常大，但是在线上一般很难做到这一点，在很大的业务场景下一般都会超过 5 个

## MySQL 的一张表的大小控制到多少比较好？

用 MySQL 的话一定要用 SSD 这样的存储设备，用上 SSD 设备的 SSD 单表能存的数据很大超过 1 亿不是很大的问题，MySQL 一张表能承受多大的数据量应该是没有限制的，1 亿和 1000 万表的查询性能维护的代价是一样的，不会有太大的差别

单库 1T 什么的都有，对于单库限制在 100G 什么的规范，对于现在的版本中已经发生的天翻地覆的变化，那些说法都已经过时了

比较可以说的一点，订单这种表的话是有时间维度的，比如快递、电商行业的表，订单很快就会完成比如一周之内就完结了（成交、退款、取消等），其实这个信息就变成以后很少去查询了，但是在线上又要做归档

所以很多时候要做分区表，把一个月之前的数据归档到其他地方，只要历史数据能查就可以，那么可能就有这样一个需求，比如快递行业只保留 3 个月的订单，其他的就归档了。这是一个归档管理操作，和性能没有关系

## B+ 树定义

* 主要是在基于块设备的存储中，用来有效的存储并检索数据的数据结构，MySQL 中一个块的大小默认是 16K，存储文件的大小都是16K 的倍数：
  
      (root@localhost) [(none)]> show variables like 'innodb_page_size';
      +------------------+-------+
      | Variable_name    | Value |
      +------------------+-------+
      | innodb_page_size | 16384 |
      +------------------+-------+
* B+树由存放所有索引字段的叶子节点和存放指针的非叶节点组成
* B+树并不能找到具体的一条记录在哪里，只能快速的找到记录在哪个块(叶)里面，找到这个块后再从这个叶子节点中找这条记录到底在哪里
* 在B+树中的叶子节点里的数据也是有序排列的，这个叶的最下面存放了一个排序的数组，找到这个叶后还会找这个排序过的数组，排序过的数据查询起来是比较高效的，通过二分法在叶子节点的这个排序过的数组内继续查找数据
* 注意前面说的叶子节点的叶与叶有序，还是叶子节点里面的记录是有序的，这些有序是指逻辑有序而不是物理有序
* 扇出，表示指向叶子节点的指针数量，因为基于块存储 B+ trees 的扇出是非常高的